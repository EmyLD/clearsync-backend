generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  firstname   String?
  lastname    String?
  password    String
  Role        Role
  phone       String?       @unique
  createdAt   DateTime      @default(now())
  airbnbLinks AirbnbInfo[]
  PartnerInfo PartnerInfo[]
  Prestation  Prestation[]
}


model PartnerInfo {
  id           Int          @id @default(autoincrement())
  userId       Int
  siret        String       @unique
  kbisFile     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  iban         String       @unique
  pushToken    String?
  isAvailaible Boolean      @default(true)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  prestations  Prestation[]
}

model AirbnbInfo {
  id           Int          @id @default(autoincrement())
  link         String       @unique
  adress       String
  postalCode   String
  surface      Int
  nbrOfRoom    Int
  city         String
  calendarlink String?
  userId       Int?
  user         User?        @relation(fields: [userId], references: [id])
  Prestation   Prestation[]
}

model Prestation {
  id          Int          @id @default(autoincrement())
  hostId      Int
  partnerId   Int?
  description String
  price       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  airbnbId    Int
  hasBeenDone Boolean      @default(false)
  isAvailable Boolean      @default(true)
  userId      Int?
  airbnb      AirbnbInfo   @relation(fields: [airbnbId], references: [id])
  partner     PartnerInfo? @relation(fields: [partnerId], references: [id])
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([airbnbId])
}

enum Role {
  PARTNER
  HOST
}
